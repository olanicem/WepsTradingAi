#!/usr/bin/env python3
# ==========================================================
# üß† WEPSMasterDataLoader ‚Äî Spiral Multi-Timeframe Edition
# ‚úÖ Fetches 1h, 4h, 1d OHLCV from FMP
# ‚úÖ Computes Sentiment Score per WEPS EPTS Framework
# ‚úÖ Outputs unified multi-timeframe DataFrames per organism
# Author: Ola Bode (WEPS Creator)
# ==========================================================
import os
import requests
import pandas as pd
from typing import Dict, List
from dotenv import load_dotenv

load_dotenv()

class WEPSMasterDataLoader:
    BASE_URL = "https://financialmodelingprep.com/api/v3"

    def __init__(self, api_key: str = None):
        self.api_key = api_key or os.environ.get("FMP_API_KEY")
        self.sentiment_symbols = {
            "SPX": "SPY",
            "NIKKEI": "^N225",
            "VIX": "^VIX",
            "DXY": "USDX"
        }

    def fetch_ohlcv(self, symbol: str, timescale: str = "1day", limit: int = 100) -> pd.DataFrame:
        url = f"{self.BASE_URL}/historical-price-full/{symbol}?timescale={timescale}&apikey={self.api_key}"
        response = requests.get(url, timeout=30)
        response.raise_for_status()
        data = response.json()
        if "historical" not in data:
            raise ValueError(f"No historical data for {symbol} ({timescale})")

        df = pd.DataFrame(data["historical"])
        df = df[["date", "open", "high", "low", "close", "volume"]]
        df["date"] = pd.to_datetime(df["date"])
        df = df.sort_values(by="date").reset_index(drop=True)
        if limit:
            df = df.tail(limit).reset_index(drop=True)
        return df

    def fetch_multi_timeframe_ohlcv(self, symbol: str, limit: int = 100) -> dict:
        """Fetch 1h, 4h, and 1d OHLCV for an organism."""
        return {
            "1h": self.fetch_ohlcv(symbol, timescale="1hour", limit=limit),
            "4h": self.fetch_ohlcv(symbol, timescale="4hour", limit=limit),
            "1d": self.fetch_ohlcv(symbol, timescale="1day", limit=limit),
        }

    def compute_daily_changes(self, df: pd.DataFrame) -> float:
        """Compute % change for most recent day."""
        if df.shape[0] < 2:
            return 0.0
        return (df["close"].iloc[-1] - df["close"].iloc[-2]) / df["close"].iloc[-2]

    def fetch_sentiment_score(self) -> float:
        """Computes the WEPS EPTS sentiment score."""
        changes = {}
        for key, symbol in self.sentiment_symbols.items():
            df = self.fetch_ohlcv(symbol)
            changes[key] = self.compute_daily_changes(df)

        sentiment_score = (
            0.25 * changes["SPX"]
            + 0.35 * changes["NIKKEI"]
            - 0.3 * changes["VIX"]
            - 0.1 * changes["DXY"]
        )
        return sentiment_score

    def fetch_organisms(self, organisms: List[str], limit: int = 100) -> Dict[str, Dict]:
        """Fetch multi-timeframe OHLCV + sentiment for selected organisms."""
        data = {}
        sentiment_score = self.fetch_sentiment_score()
        for symbol in organisms:
            multi_df = self.fetch_multi_timeframe_ohlcv(symbol, limit)
            data[symbol] = {
                "ohlcv_multi": multi_df,
                "sentiment_score": sentiment_score
            }
        return data

# ==========================
# ‚ö°Ô∏è Usage Example
# ==========================
if __name__ == "__main__":
    loader = WEPSMasterDataLoader()
    organisms = ["EURUSD", "USDJPY", "BTCUSD", "AAPL", "ETHUSD"]
    data = loader.fetch_organisms(organisms, limit=100)

    for symbol, payload in data.items():
        print(f"\n‚ö°Ô∏è {symbol} - Sentiment Score: {payload['sentiment_score']:.4f}")
        for timeframe, df in payload["ohlcv_multi"].items():
            print(f"\nüïí {symbol} [{timeframe}] Last 3 bars:\n{df.tail(3)}")
